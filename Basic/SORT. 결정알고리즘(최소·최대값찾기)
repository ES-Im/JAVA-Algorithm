/* 결정알고리즘
    - lt(0), rt(arr.length) 사이에 찾고자 하는 답이 있다고 확신이 있을 때에만 사용
    - lt와 rt, 이분검색을 활용하여 최선의 답을 추출한다. (조건이 만족하는 최소, 최대값 찾기)
    - 이분검색을 이용하므로 오름차순/내림차순으로 정렬되어있어야 한다.
    ▶ 문제에서는 최소 용량은 9(부른 곡 중 가장 긴 곡) 최대 용량은 45(곡의 길이 합)이다
      : lt = 9 rt = 45
*/



import java.util.*;

public class Main {

    static int count(int[] arr, int cap) {
        int sum = 0, cnt = 1;
        for (int x : arr) {
            if(sum+x > cap) {
                cnt++;
                sum = x;
            } else {
                sum += x;
            }
        }

        return cnt;
    }

    static int solution(int song, int record, int[] length) {
        int result = 0;

        int lt = Arrays.stream(length).max().getAsInt();
        int rt = Arrays.stream(length).sum();

        while (lt <= rt) {
            int mid = (lt + rt) / 2;
            if(count(length, mid) <= record) {
                result = mid;
                rt = mid - 1;
            } else {
                lt = mid + 1;
            }
        }


        return result;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt(); // 곡 수
        int y = sc.nextInt(); // 레코드 수
        int[] arr = new int[x];
        for (int i = 0; i < x; i++) {
            arr[i] = sc.nextInt();
        }

        System.out.println(solution(x, y, arr));
    }
}
